service cloud.firestore {
  match /databases/{database}/documents {

    match /rolls/{document=**} {
    	allow read;
    }

    match /chat/{document=**} {
    	allow read;
      allow create: if isSignedIn();
    }

    match /users/{userId} {
      allow update: if isOwner(userId) && (!has('amount') || futureDocument().amount == currentDocument().amount);
      allow create: if isOwner(userId) && !has('amount') && !userDocExists();
    }

    match /users/{document=**} {
    	allow read;
    }

    // true or false depending on matching of the passed userId with the current authenticated one
    function isOwner(userId) {
        return request.auth.uid == userId;
    }

    // true or false depending if email is verified (only works for custom login with email & pass)
    function hasEmailVerified() {
    	return request.auth.token.email_verified;
    }

    // true or false depending on auth state
    function isSignedIn() {
      return request.auth != null;
    }

    // Get current user document
    function getUserData() {
  		return get(/databases/$(database)/documents/accounts/$(request.auth.uid)).data;
		}

    // Get data being requested -> works for GET requests
    function existingData() {
      return resource.data;
    }

		// Get Document after operation
    function futureDocument() {
      return request.resource.data;
    }

		// Get current state without operation of requested Document
		function currentDocument() {
    	return resource.data;
    }

		// Get current authenticated user
    function currentUser() {
      return request.auth;
    }

		// Check if POST data is containting specific property
    function has(property) {
    	return property in futureDocument();
    }

    // Check if document for specific user already exists
    function userDocExists() {
    	return exists(/databases/$(database)/documents/users/$(currentUser().uid))
    }

  }
}
