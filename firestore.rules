service cloud.firestore {
  match /databases/{database}/documents {

		match /coinTransactions/{transactionId} {
        allow create: if get(futureDocument().from).data.uid == currentUser().uid
      			   				&& futureDocument().amount + getBetDoc().redAmount + getBetDoc().greenAmount +
                      getBetDoc().blackAmount <= getUserData().amount
                      && get(futureDocument().to).data.uid != currentUser().uid
                      && hasEmailVerified();
    }

    function getBetDoc() {
    	return get(/databases/$(database)/documents/bets/$(request.auth.uid)).data;
    }

		match /bets/{userId} {
        allow read;
           allow update: if isOwner(userId)
      					 	&& hasEmailVerified()
      						&& validateAmounts();
    }

    function validateAmounts() {
    	return checkMinusAmount('redAmount') && checkMinusAmount('blackAmount')
      		   && checkMinusAmount('greenAmount') && checkSums();
    }

    function checkSums() {
    	return futureDocument().redAmount +
      		   futureDocument().blackAmount +
               futureDocument().greenAmount <= getUserData().amount
    }

    function checkMinusAmount(property) {
    	return futureDocument()[property] - currentDocument()[property] >= 0;
    }

    match /rolls/{document=**} {
    	allow read;
    }

    match /chat/{document=**} {
    	allow read;
        allow create: if isSignedIn() && hasEmailVerified();
    }

    match /users/{userId} {
      allow update: if isOwner(userId)
      							&& hasEmailVerified()
    							&& (!has('amount') || futureDocument().amount == currentDocument().amount);
      allow create: if isOwner(userId)
      							&& !has('amount') && !userDocExists();
    }

    match /users/{document=**} {
    	allow read;
    }



    // true or false depending on matching of the passed userId with the current authenticated one
    function isOwner(userId) {
        return request.auth.uid == userId;
    }

    // true or false depending if email is verified (only works for custom login with email & pass)
    function hasEmailVerified() {
    	return request.auth.token.firebase.sign_in_provider != 'password' ||
      		   (request.auth.token.firebase.sign_in_provider == 'password' && request.auth.token.email_verified);
    }

    // true or false depending on auth state
    function isSignedIn() {
        return request.auth != null;
    }

    // Get current user document
    function getUserData() {
  		return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
	}

	// Get Document after operation
    function futureDocument() {
      return request.resource.data;
    }

	// Get current state without operation of requested Document
	function currentDocument() {
    	return resource.data;
    }

	// Get current authenticated user
    function currentUser() {
      return request.auth;
    }

	// Check if POST data is containting specific property
    function has(property) {
    	return property in futureDocument();
    }

    // Check if document for specific user already exists
    function userDocExists() {
    	return exists(/databases/$(database)/documents/users/$(currentUser().uid))
    }

    function betDocExists() {
        return exists(/databases/$(database)/documents/bets/$(currentUser().uid))
    }

  }
}
